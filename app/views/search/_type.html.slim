- if type < SDL::Types::SDLSimpleType
  tr
    td[colspan="2"]= render :partial => "value_#{type.to_s.demodulize.underscore}", :locals => {:value => type}
- elsif type < SDL::Base::Type
  tr
    th.col-md-2= type.documentation
    td.col-md-10
      - unless type.propertyless?
        table.table.table-condensed
          - type.properties.each do |property|
            = render 'type', :type => property.type
      - unless type.subtypes.blank?
        table.table.table-condensed
          - type.subtypes.each do |subtype|
            = render 'type', :type => subtype
      - unless @compendium.type_instances[type].blank?
        .form-inline
          - @compendium.type_instances[type].each do |symbol, instance|
            .checkbox
              label[for="#{type.to_s.demodulize.underscore}_#{symbol}"]
                input[type="checkbox" id="#{type.to_s.demodulize.underscore}_#{symbol}" name="#{type.to_s.demodulize.underscore}" value="#{symbol}"]
                = " #{instance.documentation} "
                | &nbsp; &nbsp;

- else
  tr
    td I don't know, how to render #{type}.